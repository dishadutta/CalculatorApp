{"version":3,"sources":["App.js","components/Button.js","serviceWorker.js","index.js"],"names":["App","props","reset","setState","current","previous","next","addToCurrent","symbol","console","log","indexOf","state","push","calculate","length","eval","String","buttons","cols","action","this","className","type","value","map","btn","i","key","Component","Button","class","onClick","e","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c4836725.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Button from'./components/Button';\r\nimport './css/style.css'\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      current: '',\r\n      previous: [],\r\n      next: false\r\n    }\r\n  }\r\n\r\n  reset = () => {\r\n    this.setState({current: '0', previous: [], next: false});\r\n  }\r\n\r\n  addToCurrent = (symbol) => {\r\n    console.log(\"symbol\");\r\n    if([\"/\", \"-\", \"+\", \"*\"].indexOf(symbol) > -1){\r\n      let {previous} = this.state;\r\n      previous.push(this.state.current + symbol);\r\n      this.setState({previous, next: true});  \r\n    }else{\r\n      if((this.state.current === \"0\" && symbol !== \".\") || this.state.next){\r\n        this.setState({current: symbol, next: false});\r\n      }\r\n      else{\r\n        this.setState({current:this.state.current + symbol});\r\n      }\r\n      \r\n    } \r\n  }\r\n\r\n  calculate = (symbol) => {\r\n    let {current, previous, next} = this.state;\r\n    if(previous.length > 0){\r\n      current = eval(String(previous[previous.length - 1] + current));\r\n      this.setState({current, previous, next: true});\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const buttons = [\r\n      {symbol: 'C', cols:3, action:this.reset},\r\n      {symbol: '/', cols:1, action:this.addToCurrent},\r\n      {symbol: '7', cols:1, action:this.addToCurrent},\r\n      {symbol: '8', cols:1, action:this.addToCurrent},\r\n      {symbol: '9', cols:1, action:this.addToCurrent},\r\n      {symbol: '*', cols:1, action:this.addToCurrent},\r\n      {symbol: '4', cols:1, action:this.addToCurrent},\r\n      {symbol: '5', cols:1, action:this.addToCurrent},\r\n      {symbol: '6', cols:1, action:this.addToCurrent},\r\n      {symbol: '-', cols:1, action:this.addToCurrent},\r\n      {symbol: '1', cols:1, action:this.addToCurrent},\r\n      {symbol: '2', cols:1, action:this.addToCurrent},\r\n      {symbol: '3', cols:1, action:this.addToCurrent},\r\n      {symbol: '+', cols:1, action:this.addToCurrent},\r\n      {symbol: '0', cols:2, action:this.addToCurrent},\r\n      {symbol: '.', cols:1, action:this.addToCurrent},\r\n      {symbol: '=', cols:1, action:this.calculate},\r\n    ];\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        {this.state.previous.length > 0 ? \r\n          <div className=\"prev-flow\">{this.state.previous[this.state.previous.length -1]}</div> \r\n        : null}\r\n        <input className=\"result\" type=\"text\" value={this.state.current} />\r\n\r\n        {buttons.map((btn,i) => {\r\n          return <Button key={i} symbol={btn.symbol} cols={btn.cols} action={(symbol) => btn.action(symbol)} />\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, {Component} from 'react';\r\n\r\nclass Button extends Component{\r\n    render(){\r\n        return(\r\n            <div class={`column-${this.props.cols}`}>\r\n                <button className=\"calc-button\" onClick={(e) => this.props.action(this.props.symbol)}>{this.props.symbol}</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}